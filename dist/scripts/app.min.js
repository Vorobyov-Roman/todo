(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
  Copyright (c) 2015 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = '';

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes += ' ' + arg;
			} else if (Array.isArray(arg)) {
				classes += ' ' + classNames.apply(null, arg);
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes += ' ' + key;
					}
				}
			}
		}

		return classes.substr(1);
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],2:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var Container = (function (_React$Component) {
    _inherits(Container, _React$Component);

    function Container() {
        _classCallCheck(this, Container);

        _get(Object.getPrototypeOf(Container.prototype), "constructor", this).apply(this, arguments);
    }

    _createClass(Container, [{
        key: "updateParent",
        value: function updateParent() {
            this.forceUpdate();
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "div",
                { id: "container" },
                React.createElement(
                    "div",
                    { className: "panel panel-primary", id: "root" },
                    React.createElement(
                        "div",
                        { className: "panel-heading" },
                        this.props.model.text
                    ),
                    React.createElement(
                        "div",
                        { className: "panel-body" },
                        React.createElement(_list2["default"], { items: this.props.model.children, parent: this })
                    )
                )
            );
        }
    }]);

    return Container;
})(React.Component);

exports["default"] = Container;
module.exports = exports["default"];

},{"./list":7}],3:[function(require,module,exports){
Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Controls = (function (_React$Component) {
    _inherits(Controls, _React$Component);

    function Controls() {
        _classCallCheck(this, Controls);

        _get(Object.getPrototypeOf(Controls.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Controls, [{
        key: 'render',
        value: function render() {
            var buttons = this.props.buttons.map(function (item, index, list) {
                var style = (0, _classnames2['default'])({
                    'btn': true,
                    'my-control-first': index === 0,
                    'my-control-last': index === list.length - 1,
                    ' ': true
                }) + (item.style || 'btn-default');

                return React.createElement(
                    'button',
                    {
                        className: style,
                        type: 'button',
                        onClick: item.handler,
                        key: index
                    },
                    item.text
                );
            });

            return React.createElement(
                'div',
                { className: 'my-controls' },
                React.createElement(
                    'div',
                    { className: 'btn-group' },
                    buttons
                )
            );
        }
    }]);

    return Controls;
})(React.Component);

exports['default'] = Controls;
module.exports = exports['default'];

},{"classnames":1}],4:[function(require,module,exports){
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _modelModel = require('./model/model');

var _modelModel2 = _interopRequireDefault(_modelModel);

var _container = require('./container');

var _container2 = _interopRequireDefault(_container);

var list = new _modelModel2['default']('Test List');
var python = list.insert('Learn Python');
python.insert('The language');
python.insert('App Engine');

var web = list.insert('Web');
web.insert('HTML');
var css = web.insert('CSS');
css.insert('Basics').check(true);
css.insert('Advanced');
css.insert('SASS').check(true);
var js = web.insert('JavaScript');
js.insert('The language').check(true);
js.insert('Standart library');
var fw = js.insert('Frameworks');
fw.insert('AngularJS');
fw.insert('ReactJS');

React.render(React.createElement(_container2['default'], { model: list }), $('#app')[0]);

},{"./container":2,"./model/model":9}],5:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = (function (_React$Component) {
    _inherits(Input, _React$Component);

    function Input() {
        _classCallCheck(this, Input);

        _get(Object.getPrototypeOf(Input.prototype), "constructor", this).apply(this, arguments);
    }

    _createClass(Input, [{
        key: "onSubmit",
        value: function onSubmit(e) {
            e.preventDefault();

            var text = React.findDOMNode(this.refs.newTodo).value.trim();
            React.findDOMNode(this.refs.newTodo).value = '';

            if (text) {
                this.props.onSubmit(text);
            }
        }
    }, {
        key: "render",
        value: function render() {
            return React.createElement(
                "form",
                { className: "input-group", onSubmit: this.onSubmit.bind(this) },
                React.createElement("input", {
                    className: "form-control",
                    type: "text",
                    placeholder: "New item",
                    ref: "newTodo"
                }),
                React.createElement(
                    "span",
                    { className: "input-group-btn" },
                    React.createElement(
                        "button",
                        { className: "btn btn-default", type: "submit" },
                        "Add"
                    )
                )
            );
        }
    }]);

    return Input;
})(React.Component);

exports["default"] = Input;
module.exports = exports["default"];

},{}],6:[function(require,module,exports){
Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _modelDirector = require('./model/director');

var _controls = require('./controls');

var _controls2 = _interopRequireDefault(_controls);

var _list = require('./list');

var _list2 = _interopRequireDefault(_list);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

var TodoItem = (function (_React$Component) {
    _inherits(TodoItem, _React$Component);

    function TodoItem(props) {
        _classCallCheck(this, TodoItem);

        _get(Object.getPrototypeOf(TodoItem.prototype), 'constructor', this).call(this, props);

        this.state = {
            hovered: false,
            pending: false,
            done: false,
            edited: false
        };
    }

    _createClass(TodoItem, [{
        key: 'updateParent',
        value: function updateParent() {
            this.props.parent ? this.props.parent.updateParent() : this.forceUpdate();
        }
    }, {
        key: 'setCursor',
        value: function setCursor() {
            if (!this.state.pending) {
                this.showPending(true);
            }

            _modelDirector.cursorDirector.set(this);
        }

        //Controls' handlers
    }, {
        key: 'remove',
        value: function remove() {
            this.props.parent.props.model.remove(this.props.model);
            this.updateParent();
        }
    }, {
        key: 'insert',
        value: function insert(text) {
            this.props.model.insert(text);
            this.updateParent();
        }
    }, {
        key: 'showPending',
        value: function showPending(state) {
            $(React.findDOMNode(this.refs.pending)).collapse(state ? 'show' : 'hide');
            this.setState({ pending: state });
        }
    }, {
        key: 'showDone',
        value: function showDone(state) {
            $(React.findDOMNode(this.refs.done)).collapse(state ? 'show' : 'hide');
            this.setState({ done: state });
        }
    }, {
        key: 'check',
        value: function check(state) {
            this.props.model.check(state);
            this.updateParent();
        }
    }, {
        key: 'render',
        value: function render() {
            var children = {
                pending: this.props.model.children ? this.props.model.children.filter(function (item) {
                    return item.completion !== 100;
                }) : null,
                done: this.props.model.children ? this.props.model.children.filter(function (item) {
                    return item.completion === 100;
                }) : null
            };
            var label = this.props.model.children.length ? React.createElement(
                'span',
                null,
                React.createElement(
                    'span',
                    null,
                    this.props.model.text,
                    ' '
                ),
                React.createElement(
                    'span',
                    { className: 'label label-primary' },
                    this.props.model.completion + '%'
                )
            ) : React.createElement(
                'span',
                null,
                this.props.model.text
            );
            var input = this.state.edited ? React.createElement(_input2['default'], { onSubmit: this.insert.bind(this) }) : null;
            var style = (0, _classnames2['default'])({
                'list-group-item': true,
                'my-done': this.props.model.checked
            });
            var buttons = [{
                text: 'Remove',
                style: 'btn-danger',
                handler: this.remove.bind(this)
            }, {
                text: 'Insert',
                handler: this.setCursor.bind(this)
            }, {
                text: this.props.model.checked ? 'Uncheck' : 'Check',
                handler: this.check.bind(this, !this.props.model.checked)
            }];

            if (children.pending && children.pending.length) {
                buttons.splice(2, 0, {
                    text: this.state.pending ? React.createElement(
                        'span',
                        null,
                        'Collapse'
                    ) : React.createElement(
                        'span',
                        null,
                        'Expand ',
                        React.createElement(
                            'span',
                            { className: 'badge' },
                            children.pending.length
                        )
                    ),
                    handler: this.showPending.bind(this, !this.state.pending)
                });
            }
            if (children.done && children.done.length) {
                buttons.splice(2, 0, {
                    text: this.state.done ? React.createElement(
                        'span',
                        null,
                        'Hide done'
                    ) : React.createElement(
                        'span',
                        null,
                        'Show done ',
                        React.createElement(
                            'span',
                            { className: 'badge' },
                            children.done.length
                        )
                    ),
                    handler: this.showDone.bind(this, !this.state.done)
                });
            }

            return React.createElement(
                'li',
                {
                    className: style,
                    onMouseEnter: _modelDirector.hoverDirector.push.bind(_modelDirector.hoverDirector, this),
                    onMouseLeave: _modelDirector.hoverDirector.pop.bind(_modelDirector.hoverDirector)
                },
                React.createElement(_controls2['default'], { buttons: buttons, ref: 'controls' }),
                label,
                React.createElement(
                    'div',
                    { className: 'collapse', ref: 'pending' },
                    React.createElement(_list2['default'], { items: children.pending, parent: this })
                ),
                input,
                React.createElement(
                    'div',
                    { className: 'collapse', ref: 'done' },
                    React.createElement(_list2['default'], { items: children.done, parent: this })
                )
            );
        }
    }]);

    return TodoItem;
})(React.Component);

exports['default'] = TodoItem;
module.exports = exports['default'];

},{"./controls":3,"./input":5,"./list":7,"./model/director":8,"classnames":1}],7:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _item = require('./item');

var _item2 = _interopRequireDefault(_item);

var List = (function (_React$Component) {
    _inherits(List, _React$Component);

    function List() {
        _classCallCheck(this, List);

        _get(Object.getPrototypeOf(List.prototype), "constructor", this).apply(this, arguments);
    }

    _createClass(List, [{
        key: "render",
        value: function render() {
            var _this = this;

            if (!(this.props.items && this.props.items.length)) {
                return null;
            }

            var items = this.props.items.map(function (item, index) {
                return React.createElement(_item2["default"], {
                    model: item,
                    parent: _this.props.parent,
                    key: index
                });
            });

            return React.createElement(
                "ul",
                { className: "list-group" },
                items
            );
        }
    }]);

    return List;
})(React.Component);

exports["default"] = List;
module.exports = exports["default"];

},{"./item":6}],8:[function(require,module,exports){
Object.defineProperty(exports, '__esModule', {
    value: true
});
//Object that handles mouse hovering
var hoverDirector = {
    //Commands that show or hide item's controlls
    _showControls: function _showControls(option) {
        $(React.findDOMNode(this.refs.controls)).stop().animate({
            top: option ? '-1px' : '-35px'
        }, 100);

        this.setState({ hovered: option });
    },

    //Stack of items being hovered.
    //Represents hierarchy: the deepest child sits on the top of the stack
    _hovered: [],

    //Shows controls of the item
    push: function push(item) {
        //hide controls of the parent, if exists
        var prev = this._hovered.slice(-1)[0];
        prev && this._showControls.call(prev, false);

        //show controls of the child
        this._hovered.push(item);
        this._showControls.call(item, true);
    },

    //Hides controls of the last item hovered
    pop: function pop() {
        //hide controls of the child
        this._showControls.call(this._hovered.pop(), false);

        //show controls of the parent, if exists
        this._hovered.length && this._showControls.call(this._hovered.slice(-1)[0], true);
    }
};

exports.hoverDirector = hoverDirector;
//Object that handles the moving of the input
var cursorDirector = {
    //Current item with the cursor in it
    _current: null,

    _setCursor: function _setCursor(state) {
        this.setState({ edited: state });
    },

    set: function set(item) {
        //hide input on the previous item, if exists
        this._current && this._setCursor.call(this._current, false);

        //change reference to the new item
        this._current = item;

        //show input on the new item
        this._setCursor.call(this._current, true);
    }
};
exports.cursorDirector = cursorDirector;

},{}],9:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TodoItem = (function () {
    function TodoItem(text) {
        var parent = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

        _classCallCheck(this, TodoItem);

        this.text = text;
        this.children = [];
        this._state = 0;
    }

    _createClass(TodoItem, [{
        key: "insert",
        value: function insert(text) {
            var item = new TodoItem(text);
            this.children.push(item);
            return item;
        }
    }, {
        key: "remove",
        value: function remove(item) {
            this.children.splice(this.children.indexOf(item), 1);

            if (!this.children.length) {
                this._state = item._state === 100 ? 100 : 0;
            }
        }
    }, {
        key: "check",
        value: function check(state) {
            if (this.children.length) {
                this.children.forEach(function (item) {
                    return item.check(state);
                });
            } else {
                this._state = state ? 100 : 0;
            }
        }
    }, {
        key: "completion",
        get: function get() {
            var total = this.children.length * 100;
            var done = this.children.reduce(function (a, item) {
                return a + item.completion;
            }, 0);

            return total ? Math.floor(done / total * 100) : this._state;
        }
    }, {
        key: "checked",
        get: function get() {
            return this.completion === 100;
        }
    }]);

    return TodoItem;
})();

exports["default"] = TodoItem;
module.exports = exports["default"];

},{}]},{},[4]);
