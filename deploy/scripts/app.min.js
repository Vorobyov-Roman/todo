function Todo(text, status) {
    this.text = text, this.status = status;
}

Todo.prototype.check = function() {
    this.status = !this.status;
};

var Model = {
    push: function(text, status) {
        this.todos.push(new Todo(text, status || !1));
    },
    pop: function(item) {
        this.todos.splice(this.todos.indexOf(item), 1);
    }
}, model = Object.create(Model, {
    todos: {
        value: []
    }
});

!function() {
    var savedTodos = reactCookie.load("todos");
    savedTodos && savedTodos.forEach(function(item) {
        model.todos.push(new Todo(item.text, item.status));
    });
}();

var TodoItem = React.createClass({
    displayName: "TodoItem",
    onCheck: function() {
        this.props.onCheck(this.props.model);
    },
    onRemove: function() {
        this.props.onRemove(this.props.model);
    },
    render: function() {
        return React.createElement("a", {
            href: "#",
            className: "list-group-item my-todo-item",
            onClick: this.onCheck
        }, React.createElement("span", {
            className: this.props.model.status ? "my-todo-checked" : ""
        }, this.props.model.text), React.createElement("button", {
            type: "button",
            className: "close",
            "aria-label": "Close",
            onClick: this.onRemove
        }, React.createElement("span", {
            "aria-hidden": "true"
        }, "Ã—")));
    }
}), Input = React.createClass({
    displayName: "Input",
    onSubmit: function(e) {
        e.preventDefault();
        var text = React.findDOMNode(this.refs.newTodo).value.trim();
        React.findDOMNode(this.refs.newTodo).value = "", text && this.props.onSubmit(text);
    },
    render: function() {
        return React.createElement("form", {
            className: "input-group",
            onSubmit: this.onSubmit
        }, React.createElement("input", {
            type: "text",
            className: "form-control",
            placeholder: "New item",
            ref: "newTodo",
            autofocus: !0
        }), React.createElement("span", {
            className: "input-group-btn"
        }, React.createElement("button", {
            className: "btn btn-default",
            type: "submit"
        }, "Add")));
    }
}), Container = React.createClass({
    displayName: "Container",
    update: function() {
        reactCookie.save("todos", this.props.model.todos), this.forceUpdate();
    },
    addItem: function(text) {
        this.props.model.push(text), this.update();
    },
    removeItem: function(item) {
        this.props.model.pop(item), this.update();
    },
    checkItem: function(item) {
        item.check(), this.update();
    },
    render: function() {
        var self = this, items = {
            done: [],
            pending: []
        };
        return this.props.model.todos.forEach(function(item, index) {
            items[item.status ? "done" : "pending"].push(React.createElement(TodoItem, {
                model: item,
                onCheck: self.checkItem,
                onRemove: self.removeItem,
                key: index
            }));
        }), React.createElement("div", {
            className: "well my-holder"
        }, React.createElement("div", {
            className: "list-group"
        }, items.pending), React.createElement("div", {
            className: "list-group"
        }, items.done), React.createElement(Input, {
            onSubmit: this.addItem
        }));
    }
});

React.render(React.createElement(Container, {
    model: model
}), document.getElementById("app"));