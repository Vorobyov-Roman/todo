var isTouch = 'ontouchstart' in document.documentElement;

var TodoProto = {
    get completion() {
        var total = this.children.length * 100;
        var done = 0;

        this.children.forEach(function(item) {
            done += item.completion;
        });

        return total ? Math.floor(done / total * 100) : 0;
    },
    insert: function(text, val) {
        var newItem = Object.create(TodoProto, {
            text: { value: text },
            completion: { value: val || 0 }
        });

        delete this.completion;
        this.children = this.children || [];

        this.children.push(newItem);

        return newItem;
    }
}

var model = {
    lists: [], //holds references to list roots
    createList: function(title) {
        var newList = Object.create(TodoProto, {
            text: { value: title },
            children: { value: [] }
        });

        this.lists.push(newList);

        return newList;
    },
    load: function() {
        //todo: load from cookies

        //temp
        var list = this.createList('Test');

        var python = list.insert('Learn Python');
            python.insert('The language');
            python.insert('App Engine');

        var web = list.insert('Web');
            web.insert('HTML');
            var css = web.insert('CSS');
                css.insert('Basics');
                css.insert('SASS');
            var js = web.insert('JavaScript');
                js.insert('The language');
                js.insert('Standart library');
                var fw = js.insert('Frameworks');
                    fw.insert('AngularJS');
                    fw.insert('ReactJS');

//        for (var i = 0; i != 10; ++i) {
//            list.insert(i.toString());
//        }
//        list.children[0].insert('ayy');
//        list.children[0].insert('lmao');
//
//        list.children[5].insert('top');
//        list.children[5].insert('kek');

        return list;
    }
};
var TodoItem = React.createClass({displayName: "TodoItem",
    getInitialState: function() {
        return {
            expanded: false,
            hoverable: true
        };
    },
    toggleChildren: function() {
        this.setState({ expanded: !this.state.expanded });
        $(React.findDOMNode(this.refs.children)).collapse('toggle');
        this.forceUpdate();
    },
    onHover: function(enter) {
        if (this.state.hoverable) {
            $(React.findDOMNode(this.refs.controls)).stop().animate({
                top: enter ? '-1px' : '-35px'
            }, 100);
        }
    },
    render: function() {
        var toggleButton = null;
        var childrenList = null;

        if (this.props.model.children) {
            //toggleButton
            var body = this.state.expanded ?
                React.createElement("span", null, "Collapse") :
                React.createElement("span", null, "Expand ", React.createElement("span", {className: "badge"},  this.props.model.children.length))

            toggleButton =
            React.createElement("button", {className: "btn btn-default", type: "button", onClick:  this.toggleChildren}, 
                 body 
            )

            //childrenList
            var children = this.props.model.children.map(function(item, index) {
                return React.createElement(TodoItem, {key:  index, model:  item })
            });

            childrenList =
                React.createElement("div", {
                    className: "collapse", 
                    ref: "children", 
                    onMouseOver:  this.setState.bind(this, { hoverable: false }), 
                    onMouseOut:  this.setState.bind(this, { hoverable: true }) 
                }, 
                    React.createElement("ul", {className: "list-group"},  children )
                )
        }

        return(
            React.createElement("li", {
                className: "list-group-item", 
                onMouseOver:  this.onHover.bind(this, true), 
                onMouseOut:  this.onHover.bind(this, false) 
            }, 
                React.createElement("div", {className: "my-controls", ref: "controls"}, 
                    React.createElement("div", {className: "btn-group"}, 
                        React.createElement("button", {className: "btn btn-danger my-control-first", type: "button"}, "Remove"), 
                         toggleButton, 
                        React.createElement("button", {className: "btn btn-default", type: "button"}, "Insert"), 
                        React.createElement("button", {className: "btn btn-default my-control-last", type: "button"}, "Check")
                    )
                ), 

                 this.props.model.text, 

                 childrenList 
            )
        );
    }
});;

var Container = React.createClass({displayName: "Container",
    render: function() {
        var items = this.props.model.children.map(function(item, index) {
            return React.createElement(TodoItem, {key:  index, model:  item })
        });

        return(
            React.createElement("ul", {className: "list-group", id: "root"}, 
                 items 
            )
        );
    }
});;

(function loadList() {
    var currentList = model.load();

    if (!$('#app')) {
        return;
    }

    React.render(
        React.createElement(Container, {model:  currentList }),
        $('#app')[0]
    );
})();

(function fillMenu() {
    var listMenu = '';
    model.lists.forEach(function(list) {
        listMenu += '<li><a href="#">' + list.text + '</a></li>';
    });
    listMenu += '<li class="divider" role="separator"></li>';
    
    $('#list-menu').prepend(listMenu);
})();